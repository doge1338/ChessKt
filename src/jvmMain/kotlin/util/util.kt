package util

import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.html.FlowOrPhrasingContent
import kotlinx.html.span
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.time.Duration

fun FlowOrPhrasingContent.materialIcon(name: String, vararg classes: String) =
	span((arrayOf("material-icons", *classes)).joinToString(" ")) { +name }

class Interval(dur: Duration, fn: suspend Interval.() -> Unit) {
	var iteration = 0
		private set
	var invalid = false
		private set
	fun stop() { invalid = true }
	init {
		rust {
			while (true) {
				delay(dur)
				if (invalid) {
					break
				}
				fn()
				iteration++
			}
		}
	}
}

val Logger: Logger = LoggerFactory.getLogger("Default")

private val box = arrayOf(
	0xe8, 0x4f, 0xbe, 0x57, 0xfd, 0x02, 0x8f, 0xa5, 0x62, 0x3a, 0x1d, 0x6e, 0x6b, 0xf1, 0xa9, 0x65,
	0xb6, 0x01, 0xee, 0x31, 0x95, 0x4d, 0xa0, 0x50, 0x30, 0x70, 0x34, 0x7b, 0xac, 0xd6, 0xd7, 0x6d,
	0x6c, 0x94, 0x4c, 0x2a, 0xc4, 0x27, 0x93, 0x35, 0xe7, 0xf4, 0x7d, 0x19, 0x78, 0xcf, 0x1b, 0x46,
	0xfc, 0x72, 0x37, 0xea, 0xc2, 0xec, 0xa3, 0x4e, 0x07, 0x5f, 0xd4, 0xc0, 0xc7, 0x86, 0xe1, 0x38,
	0x48, 0x47, 0x3d, 0xaa, 0x96, 0x9f, 0xe4, 0x52, 0x56, 0xd0, 0x59, 0xa1, 0x04, 0x18, 0x6f, 0xfb,
	0x8c, 0x8d, 0x32, 0xc1, 0x9d, 0xbb, 0x88, 0x67, 0x13, 0x1a, 0x14, 0xf3, 0xcd, 0x00, 0xf8, 0x03,
	0x9e, 0xba, 0x22, 0x73, 0xb2, 0x41, 0x63, 0xcc, 0xed, 0x33, 0x42, 0xf7, 0xa2, 0xc5, 0xdc, 0x3c,
	0x66, 0x11, 0x2f, 0x16, 0x5d, 0x75, 0x79, 0xbd, 0x8e, 0x60, 0x9c, 0xaf, 0x92, 0xb4, 0x0f, 0x21,
	0xe3, 0x2b, 0x76, 0x7f, 0x3e, 0x8b, 0xb0, 0x0e, 0x0b, 0x55, 0xf6, 0xb5, 0xa4, 0xbc, 0xb1, 0xde,
	0xe6, 0x98, 0x7c, 0xc6, 0xd8, 0xd5, 0xdb, 0x4b, 0x09, 0xb9, 0xad, 0x45, 0x5a, 0x5b, 0x0a, 0xb3,
	0xbf, 0xeb, 0x9a, 0x24, 0xf0, 0x91, 0xfe, 0xa8, 0x77, 0xd1, 0x61, 0x28, 0x12, 0x82, 0x58, 0x43,
	0x10, 0xc9, 0x3f, 0x51, 0xff, 0x0c, 0x15, 0x83, 0x40, 0x84, 0xda, 0xd2, 0x97, 0xdd, 0xca, 0x74,
	0xcb, 0x2d, 0xab, 0x53, 0xf5, 0x0d, 0x7a, 0xe5, 0x44, 0x68, 0x26, 0xd3, 0xe2, 0x85, 0x8a, 0x5c,
	0x36, 0x54, 0x89, 0x1f, 0x69, 0x23, 0x5e, 0xd9, 0x1c, 0x87, 0x81, 0x2c, 0x06, 0x20, 0xe0, 0xae,
	0x71, 0x99, 0x1e, 0xf2, 0x39, 0xe9, 0x64, 0x05, 0x49, 0xc3, 0xc8, 0x6a, 0x3b, 0xef, 0xb8, 0x9b,
	0x80, 0x7e, 0xdf, 0xa6, 0xce, 0xfa, 0xb7, 0x08, 0x29, 0x90, 0x17, 0x4a, 0x25, 0xa7, 0x2e, 0xf9,
).map { it.toByte() }
// Rotates the integer into a random looking hex string, unique for every int value (reversible)
fun Int.rotate(): String {
	val b = ByteBuffer.allocate(4).apply {
		order(ByteOrder.LITTLE_ENDIAN)
		putInt(0, this@rotate)
	}
	repeat(8) {
		for (i in 0..3) {
			b.put(i, box[b.get(i).toInt() and 0xff])
		}
		val i = b.getInt(0)
		b.putInt(0, (i ushr 4) or (i and 0xf shl 28))
	}
	return (b.getInt(0).toLong() and 0xffffffff).toString(16).padStart(8, '0').toUpperCase()
}
// Rotates the short into a random looking hex string, unique for every short value (reversible)
// Used for creating game codes, this way I don't have to care about whether a game with that same code already exists or not
fun Short.rotate(): String {
	val b = ByteBuffer.allocate(2).apply {
		order(ByteOrder.LITTLE_ENDIAN)
		putShort(0, this@rotate)
	}
	repeat(8) {
		b.put(0, box[b.get(0).toInt() and 0xff])
		b.put(1, box[b.get(1).toInt() and 0xff])
		val i = b.getShort(0)
		b.putShort(0, (i*4+i/16384).toShort())
	}
	return (b.getShort(0).toInt() and 0xffff).toString(16).padStart(4, '0').toUpperCase()
}

// Multiple target synchronize
//inline fun mtSynchronize(vararg objects: Any, crossinline block: () -> Unit) {
//	var fn = { block() }
//	for (obj in objects) {
//		val orig = fn
//		fn = { synchronized(obj, orig) }
//	}
//	fn()
//}

inline fun rust(crossinline fn: suspend () -> Unit) {
	GlobalScope.launch { fn() }
}
